
VSCode features
    - with ide's we get feature that make coding process more productive.
    - Line Numbering: makes it easy to find code
    - Syntax highlighting: makes it easy to identify code type (special key words or various objects)
        * different programming languages will have different syntax highlighting
        * vscode knows the programming language you are writing based on the file extension

VSCODE (How to run python)
    - with python, in vscode we can run the whole file OR just run a line of code
    - right click any where in the file to view the file menu & you would have 2 options
         * Run Python File in Terminal
         * Run Selection/line in Python Terminal



STATEMENTS
    - statements are the building blocks of any program 
    - they are the individual actions that you want your program to take. 
    - They are made up of keywords, expressions, and operators.
    -
    - Operators 
    - operators are symbols that tell the computer to perform an action with some input e.g +, -.
    - the inputs are also known as operands. 
    - 
    - Expressions
    - In programming, the combination of operators and operands that break down to a single value are called expressions
    - a mathematical example, 10+2*3 is an expression and the result is 16
    - note that there is an order of operation here & it is the same as the matimatical order
    - note that there is an order the interpreter follows when there is a chaining of multiple inpts
    - 
    - Computer programs are made up of statements, 
    - statements that can perform a mathematical calculation, 
    - statements that display something to the screen, 
    - statement that make a choice between two code paths. 
    - this is a powerful concept



Troubleshooting
    - programs tend to have bugs, what can you do to figure out why your code is acting up? 
    - first, you need to understand what type of bug or error you're dealing with.
    - Syntax Error: means you somehow broke the rules of the language. 
    - Runtime Error: means the computer was unable to execute a portion of your code. 
    - Semantic Error: means the output of the program is not what you expected. 
    -
    - Syntax Error
    - print(Hello World)
    -
    - Runtime Error
    - this error happens while the program is running
    - 10 * (2 / 0) --> ZeroDivisionError: division by zero
    -
    - Semantic Error
    - name = "Alice" && print("Hello name")
    - the result is "Hello name" and not "Hello Alice"
    - Semantic errors are the most challenging to troubleshoot, 
    - it's best to make tiny changes and then run your code. that makes it easier to figure out where you introduced the error. 
    - 
    -
    - also, a short walk can help clear your head and come back to the problem with fresh ideas.



Variables
    - writing code typically involves the handling of information/handling values.
    - like in a game we store the users score
    - in a banking application we store account balance 
    - 
    - a variable is simply a container for a value. 
    - when we run our programs, the computer gives us space in its memory where we can put data that we want to use as a reference for later. 
    - this data is called a variable. 
    - 
    - we declare variables in Python by giving them a name and then setting their value. 
    - this is called assigning the value. and done with the assignment operator (=), 
    - age = 36 means that somewhere in the computer's memory, it's made space & stored our value in it. 
    - age = 36 i want to take the value on the right and store it in the variable on the left. 
    - it doesn't mean the two sides are equal. That's important to keep in mind. Okay, let's 
    

Data type
    - age = 36
    - email_number = "John.doe@example.com"
    - this variables are quite different because of the type of value they store.
    -
    - a data type allows us to put our variable in a particular category 
    - so that the computer knows how much space to give us in its memory. 
    - so that the computer know how we plan to use our variable later on in the program. 
    - 
    - 36 is an integer, an whole number, no decimal places,
    - the letters and symbols inside of the double quotes is called a string
    -
    - you can check the type of any value or variable in Python by using the type function.
    - type(age) --> "int"
    - type(email_number) --> "str"


Variables across languages (type specificity)
    - in some languages, you define your variables and their types before you can use them, like Java, C#, and C++. 
    - if we store a different type in the variable, we get an error
    -
    - in Python (a more relaxed language), we don't need to declare a variable's type before using it. 
            cookies = "sugar"
            print(cookies) ---> 'sugar'
            print(type(cookies)) ---> 'str'
            cookies = 4
            print(cookies) ---> 4
            print(type(cookies)) ---> 'int'
    - the Python interpreter can infer the type based on the value.
    - we can also change the value to a different type, 
    -
    - the more relaxed languages tend to be more flexible and result in less code, 
    - whereas with more strict languages, you have fewer surprises when the code is actually run. 
    - you don't have to worry about the values changing to something strange later on. 

Variable Naming Rules in python
    1.) variable names should contain only letters, numbers, and underscores. and the name shouldn't start with a number. 
    2.) spaces are not allowed in the name. 
    3.) it's important to know that names are case sensitive.
    4.) variables cannot be keywords. These are reserved words that mean something special to the Python interpreter
            # to get the complete list of keywords in python
            import keyword
            print(keyword.kwlist)
    5.) generally, you want to use short, descriptive names that make your code easy to understand. 



Python & whole numbers 
    - python treats numbers in a few different ways 
    - depending on how they're being used 
    - and the difference is largely based on whether it's a whole or fractional one. 
        2 + 3 -> 5
        2 * 3 -> 6
        2 ** 3 -> 8 (exponentiation)
        3 / 2 -> 1.5
        3 // 2 -> 1 (floor division)
        5 % 3 -> 2
    - 45,000 / 5 -> (45, 0.0) (comma confused the interpreter - do not use comma when dealing with large numbers) 
    - 45000 / 5  -> 9000.4


Python & fractional numbers
    - in the real world, fractional numbers are a daily part of our lives.
    - in languages like JavaScript, 
    - there's no distinction between numbers with and without decimal places. 
    - whereas in most programming languages, numbers with decimal places are considered special numbersand called floats. 
    - float is any number with a decimal point short for a floating-point number. - it's used for when more precision is required 
        0.2 + 0.3 -> 0.5
        0.2 / 0.3 -> 0.66666666666667 (lots of decimal places because python is tying to be as precise as possible)



Working with Strings
    in programming when dealing with text, we use strings meaning a string characters (one by one)
    The characters can be letters, numbers, symbols, and even spaces.
        print("Hello")
        print('Hello')

    in Python, we could use single quotes to create a string as well as double quotes.
    but we cannot nest the same quote type
        print("She said "Unbelievable", to him")  --> syntax error
        print("Hello')  --> syntax error
        print("She said 'Unbelievable', to him") --> correct
        print('She said "Unbelievable", to him') --> correct

    I recommend using the double quotes version of strings as your go to as it is the most common version that you'll see across languages


Properly using whitespace
    - python doesn't care about extra empty lines in your programs, 
    - but it's common for developers to add extra empty lines to make their code easier to read.
    - we add white space between code-logic or between the different elements of our statements
       if answer=="Yes" and if answer == "Yes"
    - in the above, the two statement are the same things
    - although in python, there are times space matters, when dealing with keywords
       if answer == "Yes"  !=  ifanswer == "Yes"


Working with Comments
    - adding comments to your code, you can document the purpose of the different variables, functions, and classes. 
    - Comments are started with hash marks. when python see this, it knows to ignore the rest of the line
    - we can also use comment to temporarily ignore some code (the commenting-out-code-technique)
    - 
    - block comments
         # greet the user
         print("hi")
    - inline comment 
        name = input("What is your name?")  # collect user name
    -
    -
    -
    - Comments are a powerful tool for programmers, 
    - we can use them to serve as reminders, 
    - provide explanations for other developers, and
    - help us with debugging code.



Making Decision in Code: Boolean Expression
    - with computers are things are absolute. There's only yes or no, true or false, one or zero. 
    - any expression that breaks down to either true or false is called a Conditional or Boolean expression. 
    - does 2 + 2 equals 4, Yes,
    - is four it greater than five? No,
    - is my name Frank? No
    -
    - we cannot ask computers this kinds of questions directly so we user RELATIONAL OPERATORS. 

Making Decision in Code: Relational Operators
    - we've seen arithmetic operators (+, /, %)
    - we've seen the assignment operator (=) 
    -
    - Relational operators work with two operands, and they return a value, true or false, 
    - based on their relation to each, thus the name. 
    - examples of relationanl operators are:
    - the equality operator (==) (evaluates the equality of operands)
    - the not-equal-to operator (!=)
    - the less than operator (<)
    - the greater than operator (>)
    - the greater than & equal to operator (>=)
    - the less than or equal to operator (<=)
    -
    - 4 == 2 * 2  --> True
    - name = "Anne"; name == "Frank" --> False
    - 5 != 4
    - 5 > 4
    - 5 < 4


Making Decision in Code: Conditional Code (IF STATEMENT)
    - in the real world, we make decisions based on current conditions all of the time. 
    - if it's raining, I'll take my umbrella. 
    - if I'm sleepy, I'll grab a cup of coffee and so forth. 
    - computer can do the same by means of an if statement. 
            if condition:
                do this work
            end if
    -
    -
    - in python
            if  5 < 6:
                print("5 is less than 6")
            print("what happended?")
    - note the condition, the colon, the indentation(groups statements)
    - the indentation in Python is VERY IMPORTANT BECAUSE that's how the interpreter knows which statements belong to the if. 
    - statements that are grouped together this way in programming is called a BLOCK. 
    - in python, the block is ended as soon as we come to a line that's not indented anymore. 
    - 
    - So far, we have done top to bottom processing single line processing. 
    - with conditional statements we now have much opportunity to interact with the user. giving us a much more interesting programs.


Making Decision in Code: Conditional Code (IF-ELSE STATEMENT)
    - how do we specify some action actions to take when the condition evaluates to false?
    - we use an if-else statement in this case as well. This is done with the if-else statement. 
            if condition:
            do something
            else: 
            do something eles
            next statement
    - in programming, this is called the else clause, 
    - because you never find it without an accompanying if statement. 
    - just like in English, "every morning before I go to work" is an incomplete thought. 
    - it's just a clause.  
    - note that because of the indentation, next statement will run regardless
    -
    - with if-else statements, we will always execute one of the code blocks 
    - depending on the result of the condition test. 
    - this makes it perfect for when we need some action to take place in our programs.

Functions
    - functions make programs easier to read, write, and debug. 
    - a function is a block of code packaged together with a name. 
    - they are a core concept in programming languages going by different names like subroutines, methods, e.t.c, 
    - they help break up your code.
    -
    - one key benefit of functions is that 
    - they help us to avoid writing the same lines of code again and again. 
    - and this becomes a serious issue when we want to change something in the line of code, we would have to change it every where.(thats why we DRY)
    - 
    - functions save us from having to do this type of tedious error-prone work as programmers. 
    - we can package a code block in a function and give it a name, 
    - and we can reuse that function anywhere just by calling it.
    - this way its Much easier to read, much cleaner.


Functions: Python Syntax
        def say_hello():
            print("Hello, friends")

        say_hello()
        say_hello()
    - the def keyword
    - the funtion name (follows the variable naming rule)
    - the parenthesis & the colon
    - the code-block & the indentation
    - the function call


Functions: parameters and arguments
    - functions allow us to provide different outputs to our users based on some input. 
    - we do this by giving our function a variable called parameters
        def say_hello(name):
            if name == "orire":
                print("Hello Dad")
            else:   
                print("Hello ", name)
    - name is a parameter
    - again parameter is the name for the variables we use in our function definition
    -
    - arguments is the name for the values we give to our function
        say_hello("John")
    - note that sometimes parameters and arguments are used interchangeably, 
    - you'll have to rely on the context to figure out the meaning, 
    -
    - THE KEY thing to know is that functions have the ability to change their behavior based on their parameters and arguments. 


Functions Across languages
    - we've seen functions that fall into four main categories. 
    - those that have no parameters and no return value, 
    - those that have no parameters but do return a value, 
    - those that have parameters and don't return a value, 
    - those that have both parameters and a return value. 
    - But so far, we've only seen these functions in Python. 
    -
    -
    - Funtions in Java: !parameter & !return-value
    - those that have no parameters and no return value"
        void hello() {
            System.out.println("Hi friends!");
        }
    - the void keyword means it does not return a value
    - Unlike Python, Java requires that you always specify explicitly what the return type is of a function, even when that function isn't going to return a value.
    -
    - Funtions in Kotlin: parameter & !return-value
        fun checkGrade(grade: String) {
            if (grade == "A")
                println("You Aced the Class")
        }
    - the fun keyword (this is the tell)
    - the curly braces
    - the type of the parameter
    -
    - Funtions in Ruby: parameter & !return-value
        def calculate_check(hourly_rate)
            hourly_rate * 40
        end
    - the end keyword is the tell
    - 
    - Functions in C++
        int main() {
            int balance;
            balance = withdrawMoney(100, 50);
            cout << "Balance is:" << balance << endl;
            return 0;
        }
    - the cout keyword is the tell


The C Programming Language
    - as at recording time the top 5 most popular are Java, C, C++, Python
    - and they all inherit ideas from C. lets look at a function in C
            #include <stdio.h>

            // the main function
            int main(void) {
                printf("Hello world!");
            }
    - the include statement helps to link to code that someone else wrote into your program.
    - as programmers, it's our job to develop software that meets a business need. 
    - and we often do this with a specific deadline in view,
    - thus we cant afford to be repeating code & logic that has been written by others and verified
    - doing this is so common in programming that we call the grouping of variables and functions that someone else has written and verified, a library.
    -
    -
    - It's used for programming operating systems, games, smart devices, and even compilers for other languages.
    - If you're interested in making a desktop, web, or mobile application, 
    - C is not really your best choice. 
    - It's a low-level language and requires more advanced programming knowledge.

The Java Programming Language
    - Java is a cross-platform programming language. 
    - this means that you can write your Java code, compile it, 
    - and then any device that has the needed program installed can run it. 
    -
    - it's famous for desktop applications and mobile apps for Android. 
    - it's a C-based language, but unlike C, everything in Java is in what's called a class. 
    - it uses the class keyword and this is how java prefers to organize its code
            public class Hello {
                public static void main(String[] args) {
                    System.out.println("Hi friends!");
                }
            }

The C++ Programming Language
    - it is also a C-based language. 
    - it's earlier to learn and work with than C 
    - because it has something called garbage collection. 
    - Garbage collection cleans up unused variables for us so that we don't have to worry about handling it ourselves. 
    - C++ is used for games and game engines. 

Others
    -  Swift and Objective-C for iOS development, 
    - Ruby and JavaScript for web apps, and so on.